###########################
# Top 13 tmux Configuration that you should consider while start using tmux for three reasons:
#
# 1. tmux has a lot of less-than-stellar default setting
# 2. Keyboard shortcuts in tmux are a bit of a stretch, both physically and mentally
# 2. And, Configuration is fun, especially when you customize as per your need and taste
#
# Let's make it friendly, and along the way, do not forget to put more comments in your configuration file; they'll jog your memory later.
###########################

# Start with the biggie - <prefix>


############################ [1] Easier Prefix
#
# Using ctrl+b is a little hard to trigger as the keyboard button is pretty far. Most prefer the 'C-a' key, considering CapsLock can be remapped with Ctr, and A sits just next to the CapsLock. If you have already used the GNU screen, 'C-a' is the usual keys for you.

unbind-key C-b              # free the original bind-key key
set-option -g prefix C-a    # setting the prefix from C-b to C-a (-g for global)
bind-key C-a send-prefix    # ensure that we can send Ctrl-A to other apps

# TODO: Change Default Shell
set-option -g default-shell /usr/bin/zsh

############################# [2] Shortcut to Reload the Config
#
# There are two ways of reloading 1.shutting down all tmux sessions and restart them 2. executing 'source-file ~/.tmux.conf' on all the sessions. Let's make it easy to reload our config file between changes by new keybinding.

bind-key r source-file ~/.tmux.conf \; display "Config Reloaded !"

############################# [3] Kill it with X-Force!
#
# By default, if you press <prefix> x, tmux will ask if you're sure you want to kill a pane before it does it. That's nice and all, but what if you'd rather just kill it? Let's do that.

unbind-key x               # unbind-key “x” from it’s current job of “ask and then close”
bind-key x kill-pane       # rebind-key it to just “close”
bind-key X kill-session    # and, while we’re at it, let’s create a key combo for killing the entire session

############################# [4] Make Splitting Panes Intuitive
#
# Splitting a window in panes are currently bound to <prefix> % and <prefix> ”>, which are hard to remember. It is much easier to remember if you use | for vertical splits and - for horizontal splits.

bind-key | split-window -h -c "#{pane_current_path}" # let's open pane with current directory with -c option
bind-key _ split-window -v -c "#{pane_current_path}"
unbind-key %                 # You can leave the original options bound, if you don’t have any other use for these weird key commands.
unbind-key '"'

############################# [4] Count like Human
#
# By default, the windows or panes start with index 0 (silly programmers!). Though Tmux is one of those “created by and for programmers”, this indexing makes it challenging to do switching windows; window 0 will be all the way to.

set-option -g base-index 1                # window index will start with 1
set-window-option -g pane-base-index 1    # pane index will start with 1
set-option -g renumber-windows on         # If we removed the second window, the default result would be two remaining windows, numbered 1 and 3. But with the renumber-windows option turned on, this would mean tmux could automatically renumber the windows to 1 and 2.


############################# [6] Make Movements Quick
#
# One of the main reasons for using tmux is because it’s keyboard-centric and plays well with Vim, another favourite keyboard-centric tool. If you use the Vim, you’re probably familiar with its use of h, j, k, and l for movement keys. This way, you do not have to take your fingers off the home row to move to arrow keys.

# Pane: Vim Style Movements
bind-key -r h select-pane -L              # go left
bind-key -r j select-pane -D              # go down
bind-key -r l select-pane -R              # go right
bind-key -r k select-pane -U              # go up

# Pane: Arrow Movements
bind-key Up select-pane -U
bind-key Down select-pane -D
bind-key Left select-pane -L
bind-key Right select-pane -R

# Window: Movements
bind-key L last-window
bind-key -r C-h select-window -t :-    # cycle through the windows for quick window selection
bind-key -r C-l select-window -t :+

# Command Prompt Movements:  within the tmux command prompt and the command prompt is accessed using <P>:
set-option -g status-keys vi


############################# [7] Resizing Panes
#
# The default keys: Ctr+ Up/Down/Left/Right => one row movements , Ctr+ Up/Down/Left/Right => five row movements.
# Vim Style

bind-key -r H resize-pane -L 2         # resize a pane two rows at a time.
bind-key -r J resize-pane -D 2
bind-key -r K resize-pane -U 2
bind-key -r L resize-pane -R 2

############################# [7] Working With Text and Buffers:
#
# This can be a real productive boost if you happen to do a lot of copying and pasting between windows

# To navigating through output in quick way, enable vim navigation keys
set-window-option -g mode-keys vi

# Copying and Pasting Text like Vim (-T => key table. By default, key bound to prefix table, root table is option if we want to control with out prefix (not recommended))
bind-key Escape copy-mode
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection            -N "start visual mode for selection"
bind-key -T copy-mode-vi 'y' send-keys -X copy-selection-and-cancel  -N "yank text into the buffer"
unbind-key p
bind-key p paste-buffer
bind-key C-b choose-buffer # view the buffer stack

# Alt+C: To copy from the current buffer to the sys clipboard . This config <prefix> C-c
bind-key M-c run "tmux save-buffer - | xclip -i -sel clipboard"

# Alt+V: To paste text from sys clipboard into current buffer
bind-key M-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\";tmux paste-buffer"

# Ctr+C: Make it even better -just one step to move from sys->buffer->editor vice versa
# bind-key -T copy-mode-vi 'C-c' copy-pipe "xclip -sel clip -i"

# Ctr+V: To paste text from sys clipboard into current buffer
bind-key M-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\";tmux paste-buffer"

# To take ASCII screenshots (tmux-resurrect uses C-s for saving, here binding to C-S-s ) .
# todo: something freezing the pane after this cmd
# bind-key C-S-s run "tmux capture-pane && tmux save-buffer ~/.mytmux/screenshots/pane_\"$(date +%FT%T).ss\""

set -g history-limit 30000


# [12] Visual Styling: Configuring Colors
#
# Set the default terminal mode to 256color mode
#
# Why: Once the right color mode is set, you’ll find it much easier to use programs such as Vim, Emacs, and other full-color programs from within tmux, especially when you are using more complex color schemes for shell or syntax highlighting
#
####

set -g default-terminal "screen-256color"

# to use utf8 in status format
set-window-option -g utf8 on
set -g status on
set -g status-utf8 on

# Status Bar
set -g status-style fg=white,bg=colour04
set-window-option -g window-status-style fg=colour118,bg=colour04
set-window-option -g window-status-current-style fg=black,bold,bg=colour011

# Pane divider
set-window-option -g pane-border-style fg=colour11,bg=colour234
set-window-option -g pane-active-border-style fg=colour118,bg=colour234

# Cool trick: Let's dim out any pane that's not active.
set-window-option -g window-style fg=white,bg=colour236
set-window-option -g window-active-style fg=white,bg=colour235

# Command / Message line
set-window-option -g message-style fg=black,bold,bg=colour11

# [12] Customizing the Status Line's Content
#
# Add session, window, pane indexes - good to know
set -g status-left-length 40
set -g status-left "[#[fg=white]S: #S, #[fg=colour11]W #I-#W, #[fg=colour3]P: #P #[fg=white]]"

# Center the window list in the status line - this is much better
set -g status-justify centre

# enable activity alerts
set -g status-interval 60
set-window-option -g monitor-activity on # highlights the window name in the status line
# set -g visual-activity on # show a message in the status line

# [13] Extending tmux with Plugins
#
# ref: https://github.com/tmux-plugins/tpm
#
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
run '~/.mytmux/plugins/tpm/tpm' # init TMUX plugin manager (should be lastline)

# [x] Do not use:
#
# tmux is completely keyboard driven but at times mouse usage can come handy for easier movements.
# set-window-option -g mouse on
# clear-history
# Note: Not going to enable this and not with out a fight. Let's try 100% mouse-free development.
